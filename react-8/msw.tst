

이렇게 rtk 의 DevTools 까지 마쳤으면, 이제 msw 해볼 것이다

msw (Mocking API)  -->  가상의 백엔드 API 를 만들고 Mocking 하는 것이다

        ) 장점 : 백엔드와 프론트엔드 개발자가 동시에 개발을 시작했다고 가정해보자
                    프론트엔드 개발자가 퍼블리싱 하고 있을 때, 백엔드 API 가 나왔을 수도 있고, 아직 나오지 않았을 수도 있다

                    -->  이때 백엔드 API 가 아직 나오지 않았다고 프론트 개발자가 작업을 멈춰있으면 안된다
                    -->  프론트엔드 개발자는 백엔드 api 를 가상으로 만들어 개발을 이어나갸아한다

                    ==>  백엔드가 없이도 가상의 api (Mocking) 를 만들어서 개발을 할 수 있다  -->  axios, fetch 이런 친구들도 쓸 수 있다

                    ==>  실제 백엔드에 요청하지 않아도 실제 테스크 코드나 테스크 시나리오를 작성할 수 있다  ==>  백엔드가 있어야 할 수 있는 걸, 없이도 테스트해 볼 수 있다
                             (실제 백엔드에 요청하지 않고도 프론트엔드가 정상적으로 작동하는지 확인이 가능하다  -->  가상으로 백엔드에서 올 데이터를 만드는 것이다)

        ) 그렇다면, 왜 실제 백엔드에 요청하면 안될까?

                1. 프론트 엔드는 백엔드와 상관 없이 언제든 정상적으로 작동해야한다  -->  백엔드에서 에러가 나든 안나든 프론트는 정상적으로 작동해야한다

                2. 다양한 시나리오 분석이 가능하다  -->  실패할 경우의 요청같은 것들도 마음대로 컨트롤 할 수 있다

                3. 백엔드가 인터넷이나 오류로 작동하지 않을 때 테스트를 못해보는 경우가 없다
                        ex) 백엔드가 인터넷이 느리거나 서버가 터졌다  -->  그렇다고 프론트엔드 부분이 막히면 안된다 (테스트를 못하는 경우가 없어야한다)
                                -->  Mocking 으로 가상의 api 를 만들어서 테스트하거나, 테스크를 진행하는 경우가 많다

        ==>  이러한 이유들 때문에 "msw" 를 공부해야한다
        ==>  사용하는 가장 궁극적인 이유는, 백엔드와 상관없이 프론트에 있는 모든 코드를 진행해볼 수 있도록 하기 위해 msw 로 작업을 진행하는 것이다
        
        이제 msw 로 Mocking API 를 만들것이다  -->  이 Mocking API 활용해서, redux 의 thunk 를 만들어볼 것이다

===================================================================================================


) 테스트 코드 :

        ex) A라는 기능을 개발했는데, B라는 기능에 이슈가 생길 수도 있다  -->  내가 개발을 할 때마다 처음부터 끝까지 정상 작동하는지 직접 확인해야한다

        -->  이렇게 매번 직접 확인하면 코스트가 발생, 즉 HR 이 발생한다  -->  사람보다 기계로 테스트하는 것이 훨씬 저렴하고 속도가 빠르다

        -->  내가 개발한 기능을 테스트하는 코드를 작성하는 것이다  -->  "테스트 코드" 라고 한다

        ==>  자바스크립트에서는  "jest"  또는  "vi-text"  라는 것을 많이 사용한다

        ) TDD (Test Driven Development) : 실제 기능을 작성하기 전에 테스트 코드를 먼저 작성하고 기능을 개발하는 것이다
        
        -->  훨씬 더 코드가 안정성 있게 개발이 된다

        ==>  백엔드는 테스트코드를 엄격하게 작성하는 반면에, 프론트엔드는 테스트 코드를 엄격하게 작성하지 않는다
                이유는 변경이 많기 때문이다 (UI가 업데이트 되는 등등 변경이 많다)  -->  ex) 배달의 민족 UI 만 봐도, 되게 잦게 업데이터되며 UI 가 바뀌는 것을 확인할 수 있다

        ==>  변경이 될 때마다 테스트 코드도 함께 수정해야된다  -->  리소스가 든다 (코스트가 든다)

        ==>  즉, 프론트엔드는 테스트코드를 간단한 모듈 테스트나, e2e 테스트를 진행한다 (처음부터 끝까지 사이트 기능들 마음껏 눌러보는 것)

        ==>  프론트엔드에서 테스트 코드를 작성할 때 "벡엔드에 요청" 을 하게 되면  -->  실제 유저가 회원가입이 되기 때문에 유령 회원이 발생하고
                 또한, 백엔드가 작동하지 않으면 프론트는 테스트 코드를 작성할 수 없다

        ==>  즉, 프론트엔드는 테스트를 할 때, 백엔드에서 API 를 받기 때문에 한계가 발생한다  -->  그래서 나온 것이 "msw" 이다

        ) msw : 백엔드를 Mocking 하고, 백엔드와 상관없이 프론트엔드를 개발 및 테스트할 수 있다
                      프론트엔드 테스트할 때는 많이 쓰이지만, 그 외에는 많이 쓰이지 않는다

                      ==>  아직 우리가 백엔드가 없기 때문에, msw 라이브러리를 공부하는 것이다 (이거 몰라도 개발하는데는 지장 없다)


===================================================================================================


msw 공식 홈페이지가서 사용법 확인해보자 (Mocking 라이브러리)

        -->  확인해보면, HttpResponse.json({ ... })  -->  목데이터를 여기서 보내주는 것이다 (이제 가상 데이터 todos 같은 거 만들 필요 없다)

        -->  axios 나 fetch 로 요청하면 이 JSON 데이터가 오는 것이다

        ==>  이 msw 를 사용해서 투두리스트에 적용시켜볼 것이다


===================================================================================================


** 경로 이동 : rtk-todo

        -->  공식문서보고 설치해주자 (init 해주고, npm i 과정 진행하면 된다)

        ==>  npm install msw@latest --save-dev
        ==>  npx msw init ./public

        이렇게 npm i 하고 npx 해주면 msw 설치 된다

        -->  "npx msw init ./public" 하면 리액트 패키지의 public 폴더에 mockServiceWorker.js 생긴 것을 확인할 수 있다
        

===================================================================================================


** 경로 이동 : rtk-todo  -->  mock  -->  handlers.js

        -->  handlers 배열 안에 가상의 api 들을 넣을 것이다


** 경로 이동 : handlers.js  -->  server.js

        -->  server 만들어주자  -->  공식문서 보고 만들 것이다


** 경로 이동 : App.js

        -->  공식문서대로, 최상위 컴포넌트 (App.js) 로 가서 "server.listen()" 만들어주자

        -->  여기까지 하면 msw 를 사용하기 위한 기초 준비가 완료된 것이다

        ) 순서정리 :

                1. npm install msw

                2. npx msw init ./public

                3. handlers.js , server.js

                4. App.js  -->  server.listen()  -->  이거 server.start() 로 바꿔줬다

        ==>  콘솔창에 "[MSW] Mocking enabled" 가 뜨면 msw 준비가 잘 된 것이다
        ==>  백엔드 API 를 Mocking 한 것이다  -->  Mocking 했다는 것은, 가상 데이터를 만들었다는 말이다


===================================================================================================


) 로그인, 회원가입에서 msw 를 사용해볼 것이다

** 경로 이동 : mocks  -->  apis  -->  user.api.js / todo.api.js

        ==>  get , post 차이를 명확히 이해하고 넘어가자  ***

        ==>  http.post("/api/user/login") 이 코드 의미 정확히 이해하고 넘어가자  ***

        ==>  msw 공식문서 보면서 공부해보자 (async 적은 것도 공식문서 보고 적은 것이다)


===================================================================================================