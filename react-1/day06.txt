
day06 수업은 SignUpForm 문제를 푸는 것 부터 시작한다

** 경로 이동 : day06.txt  -->  sign-up-form.jsx

        --> sign-in-form.jsx 과 sign-up-form.jsx 에서 Form 스타일 컴포넌트가 겹치는 것을 확인할 수 있다  -->  어떻게 하면 관리해야할 포인트를 줄일 수 있을까?

        --> "관심사 분리"  -->  Form 이라고 하는 관심사를, 다른 곳으로 분리해서 사용해야 한다 (관리하는 포인트를 줄일 수 있다)

        --> main 폴더의 _components 폴더에 style.js 파일 생성해주자  -->  여기다가 Form 스타일 컴포넌트 만들어주고, export 해주면 된다

        --> 그리고 sign-up-form.jsx 에다가 import 해주고 회원가입 만들기 진행하면 된다 (sign-in-form.jsx 의 Form 컴포넌트도 지워주고 import 받아서 사용해주자)
        
        ==>  관리해야할 포인트를 여러개에서 style.js 하나로 줄인 것이다  (모듈화 시켜서 관심사 분리 하고, 재사용할 수 있게 만든 것이다)
                (중복되는 요직이 있는데?  -->  따로 빼서 사용할 수 없을까?  이걸 생각해내는 것이 중요하다 ***)


-----------------------------------------------------------------------------------------------------------------------------------------------


    ==>  option? : 옵션이라는 값이 있다면 ~~ 해라  (sign-up-form.jsx 에서 SIGNFORM_ARRAY 배열 맵 돌린 것과 함께 보자)

        -  form.option?.placeholder   -->   option 이 있다면 placeholder 를 반환해라
        -  form.option && form.option.placeholder   -->  option 이 있다면 placeholder 를 반환해라 (조건부 연산자)

        -  form.option ? form.option.placeholder : form.name   -->   option 이 있다면 placeholder 를 반환하고, 없다면 name 을 반환해라 (삼항연산자)
        -  form.option?.placeholder ?? form.name   -->   option 이 있다면 placeholder 를 반환하고, 없다면 name 을 반환해라 (삼항연산자와 같은 기능)

    
    ==>  백엔드에서 데이터가 오기 전까지 내용이 채워져있지 않기 때문에 undefined 가 떠서 오류가 뜰 확률이 크다

        -->  SIGNFORM_ARRAY.length > 0 &&  SIGNFORM_ARRAY.map((form) => <FormInput/>...)

        -->  이런식으로 "SIGNFORM_ARRAY" 배열의 길이가 0보다 크면, 이 배열을 map 돌리는 것을 실행해라  -->  이런 조건을 걸어놔야 한다
                (안그러면 내용물 백엔드에서 받지도 않았는데 map 을 돌려버려서 에러가 날 수도 있는 것이다)

        -->  애초에 undefined 이라면  -->  SIGNFORM_ARRAY = undefined 이라면
        -->  SIGNFORM_ARRAY?.map(...)  -->  이렇게 SIGNFORM_ARRAY 가 있다면 map(~~) 실행해라  -->  이렇게 해주면 된다
            


===================================================================================================


** 경로 이동 : sign-up-form.jsx  -->  main.jsx  -->  sign-up-form.jsx  (회원가입 / 로그인 버튼 경로 이동하는 거 만들기)

            -->  sign-up-form.jsx 모두 작성해줬다면, SIGN-IN 폼과 SIGN-UP 폼에서 버튼 클릭시 이동하게 만들어 보자
            -->  먼저 "회원가입" 버튼 기능 먼저 만들어보자 (sign-up-form.jsx)

            ==>  로그인 페이지의 버튼은 "투두페이지" 로 이동해야 하고, 회원가입 페이지의 버튼은 "로그인페이지" 로 이동해야 한다

            ==> main.jsx 로 이동해서 컴포넌트에 페이지를 바꿀 수 있는 formState 전역변수를 컴포넌트의 "props" 로 전달해주자 (회원가입 페이지 버튼 만들기 위함)

            {formState === 'SIGN-IN' ? <SignInForm/> : <SignUpForm formState={formState}/>}

                -->  회원가입 컴포넌트에 formState 의 변수의 값을 속성으로 전달받게 만들어준 것이다


            -----------------------------------------------------------------


            props 를 매개변수로 전달하는 이유는 "입력값" 에 따라서 다양한 결괏값을 출력하고 싶어서이다

            두번째는, 연산에 필요한 값을 전달하기 위해서도 props의 매개변수를 사용할 수 있다

            -->  formState 는 "전역변수" 가 아니라 "지역변수" 이기 때문에 이렇게 props 의 매개변수로 전달해서 값을 바꿔줘야 한다

            ==>  "상위컴포넌트" 에 있는 값을 "하위컴포넌트" 에서 변경하고 싶다면, props 로 전달을 해야 한다  ***


            -----------------------------------------------------------------


            ==>  sign-up-form.jsx 에서 onSubmitSignUp 함수 작성하기 전에, form.html 가서 버튼 관련 속성에 대해 잠깐 배워보자

            --> onSubmitSignUp 함수 역할 : 회원가입 버튼 누르면 alert 알림창 뜨고 로그인페이지로 이동하기 위함

            ** 경로 이동  : form.html , script.js  (** form 태그에 관한 중요한 내용이 있으니 잘 공부하자 **)


===================================================================================================


** 경로 이동 : form.html , script.js  -->  sign-up-form.jsx 으로 이동해서 onSubmitSignUp 함수 만들어보자 (SignUp "회원가입" 이 제출되었을 때 발생하는 이벤트를 정의할 것이다)

                --> 버튼에 onClick 이벤트를 넣어주는 것이 아니라, form 태그에 onSubmit 이벤트를 넣어줌으로써, input 의 값들을 전달할 수 있다
                        (input 에 name 속성값을 통해 데이터를 전달하는 것이다)

                --> 버튼의 타입을 적는 등, 공용 컴포넌트에다가 요직을 직접 적는 행위는 웬만하면 지양해야한다 (재사용성 범위를 넓히기 위함)


===================================================================================================


** 경로 이동 : sign-up-form.jsx  -->  sign-in-form.jsx  (로그인 페이지의 input 에도 name 속성을 줘서 데이터를 가져와주자)

                --> name={'email'} , name={'password'} 값들 input 에 넣어주자 (이메일 입력창, 비밀번호 입력창)

                --> handlePressSignIn 함수 작성해주자

                --> trim() 은 문자에서 공백문자 (띄어쓰기) 를 모두 제거해주는 것이다  -->  ex) 김 준 석  -->  trim()  -->  김준석 (공백을 제거해준다)

                --> if(!email.value.trim() || !password.value.trim()) return  -->  이 코드 해석 잘 해보자

                --> handlePressSignIn 함수 해석해보자


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  todo.jsx

                --> SIGN-IN 에서 로그인 버튼 기능 다 만들었다면, 이제 "투두페이지" 를 만들어보자

                --> todo 폴더 안에 _components 폴더 만들어주자  -->  폴더 안에 addTodoModal.jsx , todoList.jsx , oneTodo.jsx 파일 만들어주자

                ** 경로 이동 :
                
                --> 먼저 todo.jsx 부터 만들어보자  -->  libs 에서 styles 폴더 생성  ==>  common.js , theme.js 파일 생성

                ** 경로 이동 :

                -->  디자인 토큰(theme.js) , 공용CSS(common.js) 모두 작성했다면 App.js 로 이동해서 경로 랜더링해주는 RouterProvider 태그를 "ThemeProvider" 로 감싸주자
                -->  <ThemeProvider theme={theme}>  -->  이렇게 theme 이라고 하는 키의 값으로 내가 theme.js 에서 export 해준 "theme" 을 넣어주면 된다

                ==> 이렇게 하면 이제 theme 이라는 이름으로 사용이 가능하다

                ThemeProvider ***

                --> ThemeProvider 사용하는 이유 : 따로 "import" 하지 않아도, 자동으로 전달되기 때문에 사용한다
                --> ex) 매번 COLOR 라고 하는 객체를 import 하는게 아니라, 자동으로 전달 받고 싶어서 사용  { colors , fontSize }  -->  디자인 토큰


===================================================================================================


** 경로 이동 : App.js  -->  todo.jsx  컴포넌트 모두 작성해주자


===================================================================================================


** 경로 이동 : todo.jsx  -->  addTodoModal.jsx , todoList.jsx , oneTodo.jsx 이동해서 컴포넌트 만들어주자

                -->  이렇게 todo.jsx 의 Todo 컴포넌트와, 하위 컴포넌트들 모두 작성해줬다면 day06 수업 종료 ***

                -->  투두리스트 컴포넌트 코드 해석해보고, 혼자 만들어 보는 것 많이 연습하자 ***


===================================================================================================