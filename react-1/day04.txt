
day04 수업은 로그인, 회원가입 폼을 작성한다.

main 폴더에 _components 폴더를 만들어 주자 ("_"는 최상위 components 폴더와 구분을 해주기 위해 이름을 붙여준 것)

_components 폴더 안에 "sign-in-form.jsx" , "sign-up-form.jsx" 파일 생성  (컴포넌트 함수 명은 대문자로 시작해야하지만, 파일명은 상관 없다)


================================================================================


** 경로 이동 : day04.txt  -->  sign-in-form.jsx , sign-up-form.jsx  이동해서 기본 컴포넌트 만들어주자
                                    --> 기본 컴포넌트 구조 다 만들었으면 main.jsx 로 이동해서 Wrapper 스타일 컴포넌트의 하위 컴포넌트로 넣어주자


================================================================================


** 경로 이동 : Wrapper 로 모두 감싸 줬다면 스타일 컴포넌트인 Container, Header, Tab 만들어주고, S 객체 안에 넣주자 (Wrapper 의 하위 컴포넌트로 넣어주자)

        --> 컴포넌트 상위 하위 구조 만들어줬으면, "로그인" , "회원가입" 나누기 위해 "formState" 변수와 기능을 만들어보자

        --> formState 변수의 역할 : 로그인, 회원가입 화면을 나누기 위함 / 버튼 하이라이트 나누기 위함

        --> 속성(props) 부여한 것을 전달해서 css 를 바꿔줄 수 있다  -->  이게 굉장히 중요하다 ***

        --> 스타일드 컴포넌트 css 작성할 때는 " ; " 땀 표시 마지막마다 붙여주자 (문자열로 이어져서 밑에 작성한 코드와 겹쳐버릴 수 있음)

        --> 확장 프로그램 "vscode-styled-components" 설치하면 css 자동완성 시켜줄 수 있음

        --> && (조건부 연산자) : 참이면 반환하고, 거짓이면 반환하지 않는다


================================================================================


    & (자기 자신 선택자) :

        &:hover{
                background-color: #e0e0e0;  -->  나 자기 자신이 호버 되었을 때, 배경 컬러를 바꾸겠다는 의미
            }

        &  -->  "자기 자신(나)" 을 가리킨다 (축약형 이라고 생각하면 된다)

        ex)
            div > section > p
            div > section > p > a

            div > section > p {
                &(div > section > p) > a {
                    
                }
            }


================================================================================


** 경로 이동 : formState 기능 작성 모두 마쳤다면, "handlePressSignTab" 함수 작성해주자
                       (이벤트에 쓰일 함수는 앞에 보통 "handle" 또는 "on" 이름을 붙여준다  -->  사용자의 행동을 의미)

        --> "handlePressSignTab" 함수의 역할은 S.Tab 컴포넌트의 클릭이벤트로 "formState" 변수의 값을 바꿔주기 위한 함수 ("SIGN-IN" / "SIGN-UP")

        -->  리액트에서 속성에 onClick 같은 이벤트에 함수를 적을 때, 매개변수로 전달할 값이 있다면 "콜백함수" 안에 함수를 작성하면 된다    
                ex) onClick={() => 함수 (매개변수) }
                -->  formState 변수의 값을 클릭이벤트로 매개변수로 받아서 달라지게할 것이다
                        (상태 "state" 관련 속성을 쓰지 않았기에 아직 화면이 클릭으로 바뀌지는 않는다)

                        -->  상태 관련 속성을 사용해서 화면을 재랜더링 해줘야 바뀐다


================================================================================


** 경로 이동 : 코드를 확인해보면 S.Tab 부분이 반복되는 것을 확인할 수 있다  (TAB_ARRAY 배열 생성)
                      -->  이 부분을 배열 "TAB_ARRAY" 로 만들어서 map 돌려줄 것이다

------------------------------------------------------------------------------------------

        삭제해준 부분 : (주석 부분은 빨간 표시 해줬음)

                <S.Tab
                    isSelected={formState === 'SIGN-IN'} )--> S.Tab 컴포넌트에 true 또는 false 값을 가지고 있는 isSelected 속성을 넣어준 것이다
                    onClick={() => handlePressSignTab("SIGN-IN")} )--> 이벤트로 실행하는 함수에 매개변수를 넣어주려면, 이렇게 "콜백함수" 안에 함수를 넣어주면 된다
                >
                    SIGN-IN
                </S.Tab>
                ) 이 속성 값이 내가 만든 Tab 스타일 컴포넌트로 전달된다
                ) isSelected={true / false}  -->  이 속성값을 전달한다

                ) 이렇게 스타일 컴포넌트로 생성된 요소에 속성을 만들 수 있다  -->  이렇게 속성을 부여한 것을 전달해서 css 를 바꿔줄 수 있다 ***
                ) isSelected 가 true 이냐 false 이냐에 따라 달라진다
                <S.Tab
                    isSelected={formState === 'SIGN-UP'}
                    onClick={() => handlePressSignTab("SIGN-UP")}
                >
                    SIGN-UP
                </S.Tab>
                ) 스타일 컴포넌트 작성 부분(Tab)을 보면 조건부 연산자 (&&) 를 통해 isSelected가 true 이면 컬러를 변경하게 요직을 작성했다

------------------------------------------------------------------------------------------

                위의 부분들을 싹 다 지워주고 TAB_ARRAY 배열을 맵 돌려서 코드를 작성해주자

                -->  이렇게 요직을 작성해주면, 이제 밑의 컴포넌트 부분은 손대지 않고, TAB_ARRAY 배열에 값만 추가, 변경 해주면 된다 (관리할 곳이 줄어든다  -->  생산성이 올라간다)

                -->  TAB_ARRAY 배열을 순회해줘서 S.Tab 스타일 컴포넌트 두개와, name 을 이용해서 속성 값을 넣어준 것이다

                ==>  중복되는 UI 를 배열로 쉽게 관리할 수 있다 ***


================================================================================


** 경로 이동 : main.jsx 에서 배열로 중복되는 컴포넌트를 map 으로 순회해서 모두 만들어 줬다면 경로 이동해주자

                        main.jsx  -->  sign-in-form.jsx 스타일 컴포넌트 만들어주자 (Form , InputBox , Input , InputLabel)


                        ------------------------------------------------------------------------------------------------------


                        -->  "입력창" (Input) 이 사이트 전반에 재사용될 수 있다는 것을 확인 가능하다

                        ==>  src 폴더에 공용 컴포넌트를 넣어주는 components 폴더 하나 새로 만들어주자 (전역적으로 재사용될 수 있는 컴포넌트들이 들어간다)

                                -->  이제 폴더 안에 Button , FormInput 파일 생성해주자


================================================================================

    1. props  -->  위에서는 스타일 컴포넌트에 속성을 전달했다, 이제는 일반 컴포넌트에 속성을 전달해볼 것이다

        function 상위컴포넌트() {
            const value_1 = "값"
            const value_2 = "값"

            return (
                <div>  -->  리액트는 요소가 연달아 올 수 없다, wrapper 같은 걸로 감싸줘야함   (div 로 감싸주기 싫다면 어떻게 해야 할까?  -->  "Fragment" 태그로 감싸주면 된다)

                <>  -->  Fragment  -->  감싸줄 수는 있지만, 속성은 부여해줄 수 없다

                <React.Fragment key={index}>  -->  React.Fragment 를 사용하면 Fragment 인데도 속성을 부여해줄 수 있다  (상단에 react 를 import 해줘야 사용할 수 있는 태그이다)

                        <하위컴포넌트/>
                        <하위컴포넌트/>
                </React.Fragment>
                </>
                </div>
            )
        }
        -->  컴포넌트의 반환 값은 무조건 한 태그로 감사져있어야 하기 때문에, Fragment 라는 태그가 있는 것이다


    2. 구조분해할당
            -->  자바스크립트에서 데이터의 집단을 나타내는 자료구조인 "배열" 과 "객체" 의 구조를 분해하여 각각의 요소를 변수로 표현하는 과정을 축약한 것
            -->  배열 , 객체 를 분해해서 "변수" 로 만드는 것이다

            ex)
            const junseok = {
                age: 20,
                height: 190
            }

            const age = junseok.age
            const height = junseok.height  --> 이렇게 변수로 만드는 과정을 축약하고 싶다면, "구조분해할당" 을 사용하면 된다

            ----------------------------------

            구조분해할당 :  객체를 분해할 때는 { 중괄호 } 사용, 배열을 분해할 때는 [ 대괄호 ] 사용  -->  객체는 key, 배열은 index를 적용해서 활용할 변수명을 적어주면 된다

            const {age, height} = junseok
            console.log(age, height)  //  20, 190  -->  키값 이름을 명확히 적어야 한다

            const {age : junAge, height} = junseok
            console.log(junAge, height)  //  20, 190  -->  이렇게 하면 이름을 바꿔줄 수도 있지만, 이제 age 라는 이름으로 쓰지 못한다

            객체의 key 에 맞는 할당이 이루어져야한다

            ----------------------------------

            const junseok = [20, 190]  -->  배열은 index 가 key 라고 알면 된다
            const [age, height] = junseok

            console.log(age)  //  20
            console.log(height)  //  190

            -->  구조분해할당을 하는 가장 큰 이유는 객체의 키값을 명시할 수 있다는 점  -->  구성 파악하기 쉽다
            -->  데이터 집단의 값을 키(key, index) 뿐만이 아니라 내가 원하는 이름으로 사용할 수 있다는 점
                    -->  장점인 이유는, 다른 객체끼리에는 중복되는 키가 존재할 수 있어서 혼돈을 야기할 수 있다


            ==>  모두 익혔으면, FormInput 컴포넌트의 매개변수를 객체로 만든 것을 확인해보자
            
            

    3. 나머지 매개변수 연산자
            --> 함수에는 매개변수로 정말 여러개가 올 수도 있다
            ex)
            function a(A, B, C, D, ...) {
            }
            --> 여기서 필요한 매개변수는 A, B 만 있고, 나머지 매개변수들은 하나로 뭉치고 싶다면?  -->  나머지 매개변수를 사용하면 된다
            ex)
            function a(A, B, ...rest) {  -->  이렇게 "닷닷닷 rest" 적어주면 된다  -->  "rest" 는 이름 내가 마음대로 정하면 된다, 이것도 뭉쳐놓은 "매개변수" 이다
                console.log(rest)  //  {C, D, E, F, ...}  -->  이렇게 A, B 를 제외한 나머지가 오게 된다
            }

================================================================================


** 경로 이동 : FormInput.jsx 로 이동해서 "구조분해할당" , "나머지 매개변수" 한번씩 사용해주면 day04 수업 끝


================================================================================