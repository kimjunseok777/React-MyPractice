

Redux

    상태 관리를 중앙에서 하기 위한 도구 (전역 상태)
    상태 변경이나 상태와 관련된 모든 것을  "컴포넌트와 분리"  하여 관리하는 것이다 (Context + Reducer)  -->  전에 했던 useReducer 복습 해보자 ***

    밑에서 Redux 의 장점과 사용해야되는 이유를 알아보자

    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) flux pattern :

        양방향이 아닌  "단방향"  으로 데이터를 관리할 수 있다

        단방향 ex) store 라는 저장소가 있다 (상태나 상태를 바꾸는 함수들이 저장 됨  -->  즉, reducer 가 저장된다)
                          -->  이 store 에서만 view 의 데이터가 오는 것이다 (여기서 데이터는 상태가 되는 것이다)
                          -->  이렇기에 데이터가 어디서 왔는지 찾아볼 필요가 없다  -->  모두 하나의 큰 저장공간인 "store" 에서 오기 때문이다

                   ex)  -->  나중에 view 에서 사용자의 액션이 일어날 수 있다 (버튼을 클릭하는 등의 이벤트 발생)
                           -->  이렇게 어떤 행위가 일어났을 때, 이 행위를 "store" 에 전달한다  -->  이것을 "dispatch" 라고 한다 (dispatch 가 action 을 전달해준다)

                          ==>  store 에서 view 로 데이터를 뿌리고, view 에서 사용자의 action 에 따라 dispatch 로 store 에 action 을 전달하는 구조이다

                          ==>  데이터가 "단방향" 으로 흐르기 때문에 디버깅하기 굉장히 쉬워진다

    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) 개발자 도구 (devTools) :

        Redux 는 devTools 라는 개발자 도구, 혹은 다양한 추가 라이브러리 등을 제공함으로서 사용에 편리하다
        devTools 는 "로거" 나 "히스토리" 등을 지원한다

        ==>  로거 : (action, prev, next)  -->  콘솔을 찍이 않아도, 이전에 바뀌어야 하는 상태값, 이전에 전달한 상태값 등등 console.log 를 자동으로 찍어준다
                           그래서 우리가 에러를 추적할 때  -->  action 에 undefined 찍혀있네?  -->  식으로 에러를 찾기가 쉬워진다

        ==>  히스토리 : 어디서 에러가 발생했는지 확인하기 위해 "뒤로가기" , "앞으로가기" 등등 을 할 수 있다 (상태가 여러차례 바뀔때 디버깅 할 때 좋다)
    
    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) 미들 웨어 :

        백엔드에서 받아온 데이터의 통신을 전역 상태로 중앙관리하기 어려워서 만든 것이 "미들웨어" 이다  -->  미들웨어 : 중간 통로 , 중간 장소
        백엔드에서 데이터가 올 때 "미들웨어" 가 가로채서, 이쁘게 바꿔주고 다시 보내주는 것이다 (중간에서 가로채는 것 / 위의 "로거" 도 미들웨어이다)

        미들 웨어 : 중간에서 데이터를 가공해주는 것

        ==>  백엔드에 요청은 무조건 성공하는 것이 아니라 실패할 수도 있다  ==>  요청과 결과에 따라 모두 다 상태가 변경될 필요가 있다


        ex) 백엔드에서 받아오는데 시간이 오래걸린다면?  -->  "로딩중" 등의 화면을 보여줘야한다
               -->  Redux 가 아닌 useReducer 만을 썼을 때 어떻게 해야되는지 밑의 코드를 봐보자

               dispatch({
                    type: post_request,
                    payload: { }
               })   ---   로딩중

               try{
                    const response = axios...
                    dispatch({
                        type: post_success,
                        payload: response.data
                    })   ---   성공
               }
               
               catch (error) {
                    dispatch({
                        type: post_failure,
                        payload: error.message
                    })   ---   실패
               }

               -->  이렇게 Redux 를 안쓰고 useReducer 만 쓴다면 위처럼 dispatch 를 세번이나 사용해줘야 된다 (어려워진다)
               -->  redux saga, redux thunk 라고 하는 "미들웨어" 를 사용해주면 위의 과정들을 자동으로 해준다

    ----------------------------------------------------------------------------------------------------------------------------------------------

    context 와 reducer 만 사용해서 전역상태 관리하면 힘들다  -->  단순히 상태 사용하는 것보다, 사용하기 위해 작성하는 코드가 많다

    mobx, recoil, jotai, zustand 와 같은 더 경량화 되고 쉬운 라이브러리들이 많이 등장하게 된 것이다

    ==>  redux 는 최초의 상태관리 라이브러리이기 때문에 좋은 라이브러리가 아니다  ==>  하지만 회사에서 많이 쓴다 (웬만하면 redux 배우자  -->  취업에 필요)


===================================================================================================


** 경로 이동 : redux  -->  App.js

        -->  npm i redux
        -->  npm i react-redux  이렇게 두개 설치해주자 ( npm i redux react-redux )

        -->  Provider 만들어주자 (import 받아야 된다)


        ** 경로 이동 : App.js  -->  todo.jsx  -->  App.js (Provider 에 store 라고 하는 값을 전달해주자)


        ** 경로 이동 : App.js  -->  todo.reducer.js (useReducer 사용법 공부하고 reducer 만들어주자)


===================================================================================================