

Redux

    상태 관리를 중앙에서 하기 위한 도구 ( 전역 상태 )  -->  전역상태관리 도구이다

    상태 변경이나 상태와 관련된 모든 것을  "컴포넌트와 분리"  하여 관리하는 것이다 ( Context + Reducer )

    ==>  ContextAPI 와 useReducer 복습 모두 마치면 "redux" 공부 들어가자
    ==>  "react-4" 가서 useReducer 복습하기 ***

    밑에서 Redux 의 장점과 사용해야되는 이유를 알아보자 : flux pattern / dev tools / middle ware  -->  이렇게 3가지 이유가 있다

    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) flux pattern :

        양방향이 아닌  "단방향"  으로 데이터를 관리할 수 있다 (디버깅 하기에 굉장이 좋다)

                    ex) store 라는 저장소가 있다 (상태나 상태를 바꾸는 함수들이 저장 됨  -->  즉, reducer 가 저장된다  -->  전달받는 action 에 따라 실행되는 것)
                          -->  이 store 에서만 view 의 데이터가 오는 것이다 (여기서 데이터는 상태가 되는 것이다)
                          -->  이렇기에 데이터가 어디서 왔는지 찾아볼 필요가 없다  -->  모두 하나의 큰 저장공간인 "store" 에서 오기 때문이다 (reducer 작성해놓은 곳)

                    ex)  -->  나중에 view 에서 사용자의 액션이 일어날 수 있다 (버튼을 클릭하는 등의 이벤트 발생)
                           -->  이렇게 어떤 행위가 일어났을 때, 이 행위를 "store" 에 전달한다  -->  이것을 "dispatch" 라고 한다 (dispatch 가 action 을 전달해준다)

                           ==>  store 에서 view 로 데이터를 뿌리고, view 에서 사용자의 action 에 따라 dispatch 로 store 에 action(객체) 을 전달하는 구조이다

                           ==>  데이터가 "단방향" 으로 흐르기 때문에 디버깅하기 굉장히 쉬워진다 (flux pattern)

    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) 개발자 도구 (devTools) :

        Redux 는 devTools 라는 개발자 도구, 혹은 다양한 추가 라이브러리 등을 제공함으로서 사용에 편리하다
        devTools 는 "로거" 나 "히스토리" 등을 지원한다 ( logger , history )  -->  하지만 현재 redux 는 이것들을 직접 설치해야한다  -->  RTK 에서는 자체적으로 지원한다

        ==>  로거 : (action, prev, next)  -->  콘솔을 찍지 않아도, 이전에 바뀌어야 하는 상태값, 이전에 전달한 상태값 등등 console.log 를 자동으로 찍어준다
                           그래서 우리가 에러를 추적할 때  -->  action 에 undefined 찍혀있네?  -->  이런 식으로 에러를 찾기가 쉬워진다

        ==>  히스토리 : 어디서 에러가 발생했는지 확인하기 위해 "뒤로가기" , "앞으로가기" 등등 을 할 수 있다 (상태가 여러차례 바뀔 때 디버깅 할 때 좋다)
        
        ) 정리해보자면, "로거" 는 상태값을 콘솔을 자동으로 찍어주는 도구이고 "히스토리" 는 뒤로가기, 앞으로가기 등의 기능을 할 수 있는 도구이다 (에러 찾기 용이)
    
    ----------------------------------------------------------------------------------------------------------------------------------------------

    ) 미들 웨어 :

        백엔드에서 받아온 데이터의 통신을  "전역상태로 중앙관리하기 어려워서 만든 것"  이  "미들웨어"  이다  -->  ( 미들웨어 : 중간 통로 , 중간 장소 )
        백엔드에서 데이터가 올 때 "미들웨어" 가 가로채서, 이쁘게 바꿔주고 다시 보내주는 것이다 (중간에서 가로채는 것 / 위의 "로거" 도 미들웨어이다)

        미들 웨어 : 중간에서 데이터를 가공해주는 것

        ==>  백엔드에 요청은 무조건 성공하는 것이 아니라 실패할 수도 있다  ==>  요청과 결과에 따라 모두 다 상태가 변경될 필요가 있다


        ex) 백엔드에서 받아오는데 시간이 오래걸린다면?  -->  "로딩중" 등의 화면을 보여줘야한다
               -->  Redux 가 아닌 useReducer 만을 썼을 때 어떻게 해야되는지 밑의 코드를 봐보자

               dispatch({
                    type: post_request,
                    payload: { }
               })   ---   로딩중

               try{
                    const response = axios...
                    dispatch({
                        type: post_success,
                        payload: response.data
                    })   ---   성공
               }
               
               catch (error) {
                    dispatch({
                        type: post_failure,
                        payload: error.message
                    })   ---   실패
               }

               -->  이렇게 Redux 를 안쓰고 useReducer 만 쓴다면 위처럼 dispatch 를 세번이나 사용해줘야 된다 (어려워지고 복잡해진다)
               -->  "redux saga" , "redux thunk" 라고 하는 "미들웨어" 를 사용해주면 위의 과정들을 자동으로 해준다

    ----------------------------------------------------------------------------------------------------------------------------------------------

    context 와 reducer 만 사용해서 전역상태 관리하면 힘들다  -->  단순히 상태 사용하는 것보다, 사용하기 위해 작성하는 코드가 많다

    mobx, recoil, jotai, zustand 와 같은 더 경량화 되고 쉬운 라이브러리들이 많이 등장하게 된 것이다 (전역상태 관리 도구)

    ==>  redux 는 최초의 상태관리 라이브러리이기 때문에 좋은 라이브러리가 아니다  ==>  하지만 회사에서 많이 쓴다 (웬만하면 redux 배우자  -->  취업에 필요)


===================================================================================================


** 경로 이동 : redux  -->  App.js

        -->  npm i redux
        -->  npm i react-redux  이렇게 두개 설치해주자 ( npm i redux react-redux )

        ==>  구글에 redux 검색해서 공식문서 가서 확인해주자 (라이브러리이기에 공식 문서 확인 필수이다)

        -->  redux 에서 createStore (저장소) import 받아서 만들어주자  ex) import { createStore } from "redux"  -->  const store = createStore( )
        -->  Provider 만들어주자 (import 받아야 된다)  ex) import { Provider } from "react-redux"  -->  <Provider> 전역상태 사용될 컴포넌트 </Provider>


        ** 경로 이동 : App.js  -->  todo.jsx  -->  App.js (Provider 에 store 라고 하는 값을 전달해주자) , (Provider 안에 Todo 컴포넌트 넣어주자)


        ** 경로 이동 : App.js  -->  todo.reducer.js (useReducer 사용법 공부하고 reducer 만들어주자) (reducer 로 사용할 함수를 만드는 것이다)


===================================================================================================


** 경로 이동 : todo.reducer.js , user.reducer.js  -->  root.js

        -->  todo.reducer.js , user.reducer.js 는 useReducer 로 실행시킬 함수가 작성 되어있는 파일이다 (todo, user 라는 이름으로 import 받아와줬다)

        -->  root.js 는 todo.reducer.js , user.reducer.js 들을 한곳에 모아주는 파일이다  -->  combineReducers 을 통해 모아주고, export 시켜주는 것이다
                                                                                                                                           -->  그리고 이것을 createStore 에 담아주고, Provider 에 넣는 것이다
                                                                                                                                           -->  즉, 상태나 변화요직을 추가하고 싶다면 combineReducers 에
                                                                                                                                                   key 값만 만들어서 추가해주면 되는 것이다
                                                                                                                                           -->  Provider 여러개 만들지 않아도 된다  ***

        -->  combineReducers 를 import 받은 후에 객체 데이터를 넣어주면 된다  -->  중앙에 저장할 reducer 들을 합치고, key 로 분류하는 것이다
                (중앙 저장소에 저장하는 것이다) (todo.reducer.js , user.reducer.js 등등 reducer 로 실행시킬 함수들을 모아주는 것이다)

        -->  여기서 만든 rootReducer 를 App.js 에 있는 createStore (중앙 저장소이다) 에 넣어주면 된다


        ** 경로 이동 : root.js  -->  App.js  (앞에서 만들어준 createStore 에 데이터 넣어주자)  -->  createStore( rootReducer )

        ) 순서 정리 :

            1. 중앙 저장소 생성  -->  createStore()

            2. useReducer 생성  -->  todo.reducer.js , user.reducer.js ... 등등

            3. combineReducers 로 생성한 useReducer 함수들 저장  -->  combineReducers({todo, user})  -->  (합칠 reducer 를 넣어준 것이다)

            4. 앞에서 생성한 중앙 저장소 createStore 에 combineReducers 결합시킨 것 전달  -->  createStore( rootReducer )


            ==>  이러면 redux 를 사용할 준비는 끝난 것이다 (이제 컴포넌트 <Todo/> 컴포넌트에 가서 사용해주면 되는 것이다)  -->  useSelector 로 받아와서 사용해준다

            ==>  나머지 사용법은 useReducer 와 똑같다 (이미 Provider 로 감싸줬기에 useContext 만들듯이 Provider 를 매번 생성하지 않아도 된다)

            ==>  만약에 redux 가 아닌 useContext 를 썼다면, App.js 에 Provider 하나로 감싸주는 것이 아니라
                     <TodoProvider/> 뿐만 아니라 <UserProvider/> 하나 더 만들어서 감싸줬어야 됐을 것이다 (이럴 필요가 없다 이제)

                     -->  이렇게 하지 않아도, 우리가 rootReducer 안에 등록해줬기 때문에 Provider 를 매번 생성해주지 않아도 되는 것이다
                     -->  rootReducer 안의 combineReducers 에 등록만 해주면 되는 것이다

            ==>  전역 상태 관리는 이미 이뤄진 것이다  -->  action 에다가 switch 의 값만 넣어주면 끝나는 것이다

            ) 과제 : deleteTodo, updateTodo 만들어 보기  -->  addTodo 는 지금 만들어볼 것이다


===================================================================================================


** 경로 이동 : App.js  -->  todo.reducer.js

        -->  reducer 로 실행시킬 함수 (switch 문) 를 작성해주고 todo.jsx 가서 사용해주자 (Provider 로 감싸고 있는 컴포넌트가 Todo 컴포넌트이다)


        ** 경로 이동 : todo.reducer.js  -->  todo.jsx

        -->  useSelector 를 import 받아서 사용해주자  -->  ex) import { useDispatch, useSelector } from "react-redux"

        -->  생성해준 todoList (initialState) 에 요소를 추가해주는 요직 (클릭이벤트) 를 만들어보자

        ) 과제 : 추가는 만들었다  -->  "삭제" 와 "수정" 요직도 만들어보자 ***


===================================================================================================


redux-2 수업을 시작하기 전, react-4 의 useReducer 부분을 복습하고 넘어간다

 ** 경로 이동 : react-4  -->  globalstate.txt

        -->  useReducer 사용하는 이유에 대해서 한번 공부하고 넘어가자
