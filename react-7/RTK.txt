

RTK : redux 의 가장 최신 버전이다

    ) redux 를 사용하는 이유 3가지 :

        1. 전역 상태 관리
        2. 단방향 데이터 흐름을 통한 상태 중앙 관리  -->  에러 추적 용이 (flux pattern)
        3. 다양한 플러그인 및 미들웨어 지원

        )==>  flux pattern / dev tools / middle ware


    ) redux 의 단점 :

        사용하기 위해 작성해야하는 코드가 많으며, 중앙 상태 관리를 강요한다 (redux 를 사용하려면, useReducer 를 무조건 만들어야한다)

        ==>  이러한 단점 때문에 나온 것이 RTK 이다  -->  @redux-tool-kit
                  redux 의 단점을 보완하고자 나온 라이브러리이지만, 아쉽게도 큰 호응은 얻지 못했다

        ==>  redux 에서는 플러그인들을 자체 설치했어야한다 (다른 사람들이 만든 라이브러리들을 직접적으로 사용하고 있다)
                  -->  이러한 단점 때문에 redux-2 에서 설치가 안됐던 이슈가 난 것이다 (다른 사람들이 만든 것들에 의존하고 있다  -->  버전 오류가 날 수 있음)

        ==>  RTK 는 플러그인들을 자체 지원하고 있다 (middleWare, devTools, logger ... 등등 따로 설치 안해도 된다  -->  rtk 만 설치하면 된다)

        ==>  RTK 는 작성하기 위한 코드도 redux 보다는 조금 줄어든다


    ) 현재 실무에서 가장 많이 사용하는 전역상태 관리 도구 (1~4 순위이다)

        1. redux + saga / thunk  , rtk (rtk 는 기본 redux 와 다르게 자체적으로 saga 와 thunk 를 지원하고 있다  -->  따로 설치 안해도 된다)

        2. mobx

        3. jotai , zustand

        4. recoil


    ) 프론트엔드 이직이나 채용공고를 어디서 많이 볼 수 있는지 확인해보자 (어떤 걸 공부해야할지 정할 수 있다)  -->  사이트들을 확인해보자

        wanted , 점핏 , 로켓펀치, 잡코리아, 사람인 ... 등등의 채용공고 사이트들이 있다 ) 항상 "최신순" 으로 체크해서 보는 것이 좋다

        ==>  로켓펀치  -->  채용에서 경력을 신입으로 하고, react 를 검색후 최신순으로 해서 공고들을 확인해보자

        ==>  여기서 프론트엔드 스택을 확인해보면 어떤 걸 공부해야하는지 확인할 수 있다

                ex) TypeScript , Webpack , React , Next.js , Recoil , Vanila Extract , Emotion , React Query ... 등등 확인할 수 있다

                    -->  Vanila Extract , Emotion  -->  이것들은 스타일드 컴포넌트 같은 것들이다 (둘중 하나만 쓴다고 알고 있으면 된다)
                    -->  Emotion 과 styled-components 는 사용법이 완전히 똑같다고 보면 된다

                    -->  Webpack 은 신경 안써도 된다

                    ==>  채용 공고를 확인해보면 "Next.js" 는 거의 필요한 것을 확인할 수 있다  -->  Next.js 공부 무조건 하는 것이 좋다 ***

                    ==>  채용 공고와 회사에 대한 설명이 잘 적혀있어서, 개발자를 굉장히 우대해주는 회사에 들어가는 것이 좋다 ***

                    ==>  "상시채용" 이라고 적혀있는 곳은 지원을 안하는 것이 좋다 (뽑을 생각이 없는데 올려놨을 가능성이 높다  -->  진짜 잘하는 친구들을 뽑으려고)
                              상시채용은 거의 안 될 가능성이 높다

                    ) 프로젝트 (백엔드와 협업) 를 해보고 싶다면, 이것 역시 사이트들을 확인해보면 된다

                    ==>  HOLA 같은 웹사이트 활용하면, 사이트프로젝트도 쉽게 구해서 협업해보면서 프로젝트를 해볼 수 있다


         ) 이번 수업에서 채용 공고를 확인하는 이유는 회사에서 전역상태관리 도구 어떤 걸 많이 쓰는지 확인하기 위함이다

                -->  redux, rtk, mobx 를 사용하는 회사들이 많다

                -->  최신 도구인 jotai  같은 것을 사용하는 회사들은 만 1,2 년이 안된 스타트업일 가능성이 높다 (최근에 만들어진 회사, 스타트업)

                -->  보통 10년 정도 된 큰 기업이나 규모가 큰 회사일 수록 redux 나 mobx 를 사용할 가능성이 높다


===================================================================================================


이번 RTK (Redux Tool Kit) 수업은 전에 만든 투두리스트의 전역상태 관리를  "ContexdtAPI"  에서  "RTK"  로 바꿔주는 식으로 진행한다

        -->  전역상태 관리 도구를 바꿔주는 작업이다


===================================================================================================


** 경로 이동 :  rtk-todo (front_react 폴더에서 formTodo 에서 src 와 패키지를 복사해온 리액트 패키지이다)

** 경로 이동 : App.js

        ==>  npm i @reduxjs/toolkit
        ==>  npm i react-redux  -->  공식문서 확인하고 이거 2개 설치해주자

        -->  전역상태관리를 이제 contextAPI 로 하지 않고 RTK 로 할 것이기 때문에 TodoProvider 만들어준 전역상태 관리 지워주자

        -->  공식문서 확인하고 store 폴더 안에 store.js 만들어주자


===================================================================================================


** 경로 이동 : App.js  -->  store.js

        -->  공식문서 보고 configureStore 만들어주자  -->  ex) import {configureStore} from "@reduxjs/toolkit"  -->  export const store = configureStore({ ... })
        -->  만들었으면 Provider 에 store 의 값으로 넣어주자  -->  ex) <Provider store={store}>


** 경로 이동 : store.js  -->  todo.slice.js

        ==>  contextAPI 로 만든 todo.store.js 삭제시켜주고, "todo.slice.js" 만들어준 것이다

        -->  createSlice 로 상태변화 분기처리 요직 만들어주자 (switch문 같은거 쓰지 않아도 된다)  -->  ex) import { createSlice } from "@reduxjs/toolkit"

        -->  createSlice 모두 작성하고 action , reducer 모두 export 해줬으면 store.js 에 가서 내가 등록하고 싶은 key 로 등록해주면 된다


** 경로 이동 : todo.slice.js  -->  store.js

        -->  내가 원하는대로, 겹치지만 않게 key 이름을 정해서 reducer 를 import 받아서 등록시켜주면 된다
        -->  ex) import todoReducer from "./todo.slice"  -->  reducer: { todo: todoReducer }


===================================================================================================


** 경로 이동 : store.js  -->  todoList.jsx

        -->  이제 contextAPI 로 전역상태 관리하던 부분 모두 주석처리 해주고, RTK 전역상태 관리 도구로 바꿔줄 것이다


        ** 경로 이동 : todoList.jsx  -->  oneTodo.jsx

                -->  수정이랑 삭제 요직 RTK 전역상태관리 도구를 사용한 요직으로 바꿔주자  -->  dispatch 사용해주기

                ==>  reducer 에 적었던 key 값들을 사용하려면 import 받아줘야한다  -->  ex) { addTodo, deleteTodo, updateTodo }

===================================================================================================


** 경로 이동 : oneTodo.jsx  -->  addTodoModal.jsx

        -->  작성 요직도 마찬가지로 RTK 로 바꿔주자  -->  ex) dispatch( addTodo( newTodo ) )

        ==>  ... (전개연산자) 사용해서 복사본 만들지 않고, unshift / push 같은 것을 사용해줬다  -->  자동으로 불변성을 보장해주기 때문에 가능하다


===================================================================================================

이렇게 투두리스트를 RTK 로 바꿔주면, 이제 devTools , Logger 등의 디버깅 도구들을 사용해볼 것이다

===================================================================================================


** 경로 이동 : addTodoModal.jsx  -->  store.js

        -->  configureStore 에 devtools 라는 옵션을 key 로 추가해주자  -->  process.env.NODE_ENV !== "production" 이 코드가 뭐하는 것인지 이제 알아보자

        -->  NODE_ENV 에 대해서 잘 공부해보자, 중요한 이론이다 ***

        -->  NODE_ENV 이론 공부 마쳤으면, devtools 의 "로거(logger)" 를 사용해보자


        ) 먼저 로거 설치해주자
        ==>  npm i redux-logger

        -->  logger 설치 했으면, configureStore 에 middleware 옵션 추가해주자

        ==>  devtools 와 middleware 는 reducer 가 아니기에, reducer 안에 적어주면 안된다  -->  바깥에다가 적어야한다


===================================================================================================


이렇게 devtools 와 middleware 옵션 설정 모두 마쳤으면, 투두페이지에서 어떠한 action을 취했을 때 콘솔창에 prev , action , next 가 뜨는 것을 확인할 수 있다

        -->  콘솔창에서 logger 잘 뜨는 것 확인했다면, 이제 devTools 어떻게 뜨는지 확인해보자


===================================================================================================


** 경로 이동 : 크롬 웹스토어에 들어가서 "Redux DevTools" 를 크롬에 추가해주자 (이제 devTools 옵션을 쓸 수 있다)

        ==>  DevTools 사용하면 디버깅이 굉장히 쉬워진다  -->  매우 좋은 개발자 도구이다 ***

        -->  로거 보다 더 편하게 확인할 수 있다

        -->  개발자모드에서 상단에 오른쪽 끝에 쌍화살표 누르면 "redux" 있는데, 이거 클릭해주면 확인할 수 있다 (투두페이지에서 확인해주자)

        -->  이 DevTools 로 어떤 action 이 실행됐고, 어떤 데이터가 왔는지 확인할 수 있다 (logger 보다 편리하다)

        -->  어떤 state 가 변경됐고, 어떤 action 객체가 있는지 확인할 수 있다 (type 명이나 데이터등을 확인할 수 있다)

        -->  밑에 보면 "히스토리" 도 관리할 수 있는데, 화살표로 이전과 이후 상태도 확인할 수 있다


        ==>  앞에 "react-6" 의 redux-2 에서 시도해보려 했던 기능이 이것이다

                -->  redux 에서는 버전이 올라가면서 대응이 안됐지만,
                        rtk 에서는 자체적으로 이런 기능들이 만들어져 있기에 버전 대응이 돼서 이런 기능을 사용할 수 있는 것이다


===================================================================================================


이렇게 DevTools 까지 마쳤으면, 이제 msw 해볼 것이다

msw (Mocking API)  -->  가상의 백엔드 API 를 만들고 Mocking 해는 것이다

        ) 장점 : 백엔드와 프론트 개발자가 동시에 개발을 시작했다고 가정해보자
                    프론트엔드 개발자가 퍼블리싱 하고 있을 때, 백엔드 API 가 나왔을 수도 있고, 아직 나오지 않았을 수도 있다

                    -->  이때 백엔드 API 가 아직 나오지 않았다고 프론트 개발자가 작업을 멈춰있으면 안된다


===================================================================================================