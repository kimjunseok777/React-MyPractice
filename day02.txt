
리액트 핵심 컨셉 3가지 : 

    1. 컴포넌트
        --> HTML 코드가 굉장히 길어지면 가독성이 안 좋아지는데, 이것을 분리해서 사용할 수 있게 해주는 것

    2. 가상돔 (Virtual DOM)
        --> DOM API 에 직접 접근을 하면 요직이 복잡해진다, 하지만 가상돔을 사용하면 실제 돔은 바뀌지 않고 복잡성을 줄인다
        --> 개발자가 원하는 시점에 화면을 다시 그릴 수 있다

    3. ReRendering
        --> 컴포넌트는 HTML을 반환하는 함수로 되어있다. 이 함수 안에는 state 라고 하는 변수가 있다.
               이 변수의 값이 바뀌면 함수를 재실행한다. --> 그러면 화면을 다시그린다 (새로운 HTML 을 반환한다)

--------------------------------------------------------------------------------------------------------------------

npm uninstall -g create-react-app

    --> npm install <설치할 모듈 이름>
    --> npm uninstall <삭제할 모듈 이름>

    설치가 도중에 멈춘다면, npm 이 설치되어 있을 수 있으니, "npm uninstall -g create-react-app" 해준 후에 npx 로 다시 실행시켜주면 될 거다

--------------------------------------------------------------------------------------------------------------------

작업할 리액트 폴더구조 : Hooks

    - Hooks 폴더 구조 (src)

        components  -->  모든 페이지에 공유 가능한 컴포넌트들이 들어간다

        hooks  -->  상태 관련된 재사용되는 리액트 함수들이 들어간다

        pages  -->  웹 내 체이지
            main
                hooks -->  해당 페이지에서만 사용되는 리액트 함수
                components  -->  해당 페이지에서만 사용되는 컴포넌트
                index.js  -->  컴포넌트들이 조립되는 공간 (main.js 라고 해도 된다)

            todo
            board
            my-page
            ...

        utils  -->  유틸 함수들이 들어간다 (helper)  -->  ex) 시간을 알려주는 기능 등이 들어간다 (모든 페이지에서 동일하게 쓰일 수 있음)

        libs  -->  라이브러리 관련된 함수나 폴더가 구성

        app.js  -->  "/"(URL 이 없으면)라고 하는 친구를 만나면 main 페이지를 보여줘라
                            "/todo" 라는 친구를 만나면 todo 페이지를 보여줘라  --> 이런 역할

                            ==>  다른 라이브러리를 사용하는 설정이나, 루트 설정
                            ==> ex) 메인이면 메인 컴포넌트 보여주고, 로그인이면 로그인 컴포넌트 보여주는 역할 (주소 설정)

                            ==> app.js : pages 에 매칭하는 공간

--------------------------------------------------------------------------------------------------------------------

폴더 구조 :

    -> components
            TDButton.js

    -> layouts
            TDFooter.js
            TDHeader.js
            TDLayouts.js

    -> pages
            main
                components
                    Form.js
                main.js(index.js)
            todo
                components
                    ADDModal.js
                    OneTodo.js
                    TodoList.js
                todo.js(index.js)

    -> libs
            routes
                router.js  -->  URL 과 pages 매칭

    -> styles
            디자인 시스템

--------------------------------------------------------------------------------------------------------------------

리액트는 공부할 때 폴더 단위로 파일 단위로 이동하기 때문에, 필기할 때 "순서" 를 반드시 필기하며 공부하자

--------------------------------------------------------------------------------------------------------------------

react-router-dom (라이브러리)

    router : 네트워크에 데이터를 전송하는 매개체  -->  ex) 어떤 URL 감지  -->  그 URL 에 맞는 컴포넌트를 보여줌 

    --> 현재 웹사이트에 URL 을 감지하여 어떠한 컴포넌트를 보여줄지 결정하는 도구

    사용법 :
        npx로 만든 폴더로 경로 지정해준 후에  -->  npm i react-router-dom  (웹사이트에 가이드문서에서 사용법을 보는 것이 좋다)
        - npm install react-router-dom

        구글에 react-router-dom 검색 후, Tutorial 확인

        ==> 잘 설치가 됐다면, package.json 파일에 "react-router-dom" 이 있는 것을 확인할 수 있다 (없으면 설치되지 않은 것이다)

==>  src 폴더 안에 새 폴더로 libs --> routes 폴더 --> router.js 파일 생성
==> 라이브러리 공식 문서로 가서 사용버을 확인해보자 (Tutorial)

--------------------------------------------------------------------------------------------------------------------

==> 모두 마쳤다면 router.js 이동해보자

router : 웹사이트의 URL 을 감지해서, URL 에 맞는 컴포넌트를 매칭시켜주는 친구

--------------------------------------------------------------------------------------------------------------------

day 02 수업 파일 : router.js , App.js , main.jsx , todo,jsx