

커스텀훅 : (훅함수를 사용한 관심사 분리  -->  모듈화 하는 것)

        훅 함수를 사용하는 요직이 재사용될 때 모듈화 해놓은 것이다  -->  재사용할 수 있는 훅함수를 사용한 함수를 분리한 것

        ex)
        A 컴포넌트에서 상태 a 를 b 로 바꾸는 요직이 있다 (a --> b)
        B 컴포넌트에서 상태 a 를 b 로 바꾸는 요직이 있다 (a --> b)

        -->  A , B 는 각각 다른 컴포넌트이지만, 상태가 a 에서 b 로 바뀌는 요직은 똑같다 
        -->  이렇게 A 컴포넌트와 B 컴포넌트에서 각각 상태가 변경되는 요직이 같다면 관심사를 분리해서 재사용하는 것이 좋다

        함수로 만들면 관리해야할 포인트가 줄어든다

        ==>  훅함수를 사용한 관심사 분리이기에, 훅함수를 커스텀 한 것이라서 "커스텀훅" 이라고 하는 것이다
        ==>  공통되는 로직을 분리하여 관리할 포인트를 줄이는 것이다  (커스텀훅)
        ==>  "훅함수" 를 사용할 수 있는 로직을 분리함으로써, 관리할 포인트를 줄이는 것


        ) 우리는 useInput 커스텀 훅을 만들고 사용해볼 것이다

            하지만 useInput 은 RHF (React Hook Form) 를 사용하면 자주 사용하지는 않는다
            -->  그래서 useInput 을 사용한 것을 그대로 RHF 로 넘어가볼 것이다


===================================================================================================


** 경로 이동 : customHook.txt  -->  todolist(전역 상태까지 진행된 투두리스트)   -->  로그인 페이지, 회원가입 페이지 (sign-in-form.jsx)

        ==>  이 투두리스트는 react-4 의 contextTodo 복사해온 것이다

        -->  먼저 sign-in-form 에서 error 메세지를 보여줄 것이다 (입력값에 따른 유효성 검사 로직을 만들어볼 것이다)

        -->  value 값 받아올 email 상태 선언해주고, input 의 onChange 로 넣어주고 실행시킬 handleChangeEmailValue 함수 만들어주자

        -->  입력창이 여러개니까, 값을 상태로 받아오려면 상태 선언과, 그에 실행할 함수도 배로 만들어줘야된다
                
                이렇게 반복되는 코드 치면 관리할 포인트가 많아진다  -->  hooks 폴더 만들어서 커스텀훅 (useInput) 으로 관심사를 분리시켜보자


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  hooks  -->  use-input.js

        -->  커스텀 훅은 앞에 반드시 "use" 로 시작해야한다


        ** 경로 이동 : use-input.js  -->  sign-in-form.jsx

            -->  커스텀훅 모두 작성했으면, 다시 로그인 페이지로 가서 useInput 사용해주자

            -->  원래 적었던 상태 지워주고, 앞에서 만들어준 useInput 커스텀 훅을 사용해보자 (상태와 입력값을 받아오는 함수를 동시에 선언하는 로직이다)

            -->  모두 커스텀훅으로 변경 해줬다면, 이제 입력값에 따라 error 메세지를 띄워줄 것이다


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  components  -->  FormInput.jsx

        -->  에러 처리 조건 모두 작성해줬으면 FormInput 공용 컴포넌트로 이동해주자

        -->  속성으로 error 보내줬으니, FormInput 컴포넌트에도 속성 error 추가해서 받아주자 (error 라는 key 로 텍스트가 들어가있는 value 를 보낸 것이다)
                (error 를 어디서 보여줄지 p 태그로 정의해주고, css 약간 꾸며줄 것이다)

        -->  error 메세지 p 태그로 감싸주고, 스타일 넣어서 꾸며주자

        -->  p 태그 작성해주면서, 컴포넌트에 있던 "margin-bottom" css 삭제해줬는데, 이렇게 컴포넌트에 마진 직접적으로 주면 안된다


===================================================================================================


** 경로 이동 : FormInput.jsx  -->  sign-in-form.jsx (disabled 속성 넣어주기)

        -->  로그인 버튼에 disabled 속성을 넣어주자  -->  disabled 가 true 이면 버튼이 클릭이 안되고, false 이면 클릭이 되는 것이다

        -->  disabled={!isValidEmail || !isValidPassword} 이렇게 버튼의 disabled 속성을 조건으로 걸어주자 (true / false)
        -->  입력창 둘중 하나라도 유효하지 않는 것이 true 이면, disabled 는 true 로 버튼이 비활성화 된다

        -->  disabled 가 되면 버튼 비활성화로 UI 가 바뀐다  -->  하지만 상태로 만들면 안된다
                엄연히 disabled 가 되는 순간은 email 과 password 에 의존해 있다  -->  이미 email 과 password 가 상태이기에 화면이 바뀌는 것이다

                const [isDisabled, setIsDisabled] = useState()  -->  즉, 이렇게 만들어주면 불필요한 상태를 만드는 것이다


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  sign-up-form.jsx

        -->  회원가입 페이지도 입력값에 유효성 검사 로직을 만들어주자

        -->  입력창이 총 3개인데, useInput 3개씩이나 만드는 게 옳을까?  -->  useInputs 를 만들어주자


        ** 경로 이동 : sign-up-form.jsx  -->  hooks  -->  use-inputs.js

                -->  여기서 상태 "객체" 로 만들어준 것 잘 공부해보자  -->  매우 중요하다 ***


        ** 경로 이동 : use-inputs.js  -->  sign-up-form.jsx

                -->  커스텀훅 만들어 줬으면, 다시 회원가입 페이지로 가서 useInputs 사용해주자

                -->  초기값 객체로 선언해주고, input 에 onChange 속성으로 함수 실행시켜주는 로직 만들어주자

                -->  이번에는 map 을 돌려서 input 창을 만들어줬으니, 그에 맞게 switch 문으로 분기처리하는 함수를 만들어서 error 메세지를 띄울 것이다


===================================================================================================


** 경로 이동 : sign-up-form.jsx  -->  main  -->  _utils  -->  validate-helper.js

        -->  훅함수를 사용하지 않는 validate 관련된 재사용 되는 함수들을 넣을 것이다 (모듈화할 것이다)

        -->  관리할 포인트를 줄일 수 있는 것이다  -->  ex) 비밀번호 10글자 이상으로 바꿔주세요  -->  validate-helper.js 가서 한번만 바꿔주면 되는 것이다

        
        ** 경로 이동 : validate-helper.js  -->  sign-up-form.jsx , sign-in-form.jsx

                -->  모듈화 시킨 함수 사용해서 유효성 검사 변수 선언했던 것들 주석해주고, 모듈화 시킨 것으로 사용해주자

                -->  sign-in-form.jsx 도 마찬가지로 모듈화 시킨 걸로 유효성 검사 변수들 바꿔주자


        ==>  validate-helper.js 처럼 이렇게 "함수" 로 만들어 내는 걸 생각해내는 것이 매우 어려운 것이다

        ==>  함수 만드는 거 잘하려면 알고리즘 문제풀이 정말 많이 연습해야한다  -->  코딩테스트 문제풀이 열심히 하자 (자바스크립트 문제풀이 **)

        ==>  커스텀 훅으로 관리할 포인트를 줄이고, 모듈화 해서 함수를 관심사 분리 시켜야된다고 생각해내는 것이 매우 중요하다


===================================================================================================


RHF (React Hook Form)

        방금까지 상태를 활용해서 input 이 변화할 때의 모든 순간을 리랜더링했다
        -->  이렇게 input 값이 바뀔 때마다 진행되는 것은 불필요하다  -->  유효성을 어겼을 때만 리랜더링 되는 것이 최적화에 좋다

        React Hook Form 은 form 의 유효성 검사를 매번 리랜더링하는 것이 아니라, 내가 정의한 특별한 조건을 만족했을 때만 리랜더링 하는 것
        -->  RHF 는 라이브러리이다  -->  RHF 를 사용하는 순간 input 을 상태로 만들 필요가 없어진다  -->  모두 다 제공해준다
        
        ex)  import { useForm } form "react-hook-form"
                const { register , formState, errors } = useForm()
                <input ...(register("email"), {pattern, maxLength, minLength}) />  -->  이렇게 사용하면 된다

                ==>  이런시긍로 사용하는데, 이러면 유효성검사를 내가 원할 때만 사용할 수 있게 되는 것이다 (리랜더링 최적화 가능)


** 경로 이동 : reacthookform

        -->  RHF 는 리액트에서 만든 것이 아니라, 라이브러리이다  -->  공식문서를 먼저 봐야한다

        https://react-hook-form.com/  -->  들어가면 바로 앞에 validation(유효성 검사) 쉽게 하려고 사용하는 라이브러리라고 적혀 있다

        -->  먼저 설치를 해줘야 한다  -->  npm i react-hook-form


===================================================================================================


** 경로 이동 : reacthookform  -->  App.js

        -->  RHF 사용해주면, 앞에서 만들었던 것처럼 useInput 커스텀훅 만들고 함수 만들고 할 필요가 없어진다  -->  굉장히 편한 거다 (RHF 잘 공부해보자)


        ** 과제

        contextTodo 복사본을 만들어서 formTodo 를 만들고, formTodo 의 로그인 페이지, 회원가입 페이지를 RHF 를 사용해서 유효성 검사 로직을 만들어보자

        ==>  다음주에 해볼거지만, yup 혹은 정규표현식(regex)을 사용해봐도 괜찮다

        ==>  formTodo 리액트 패키지 만들어서 로그인, 회원가입 페이지 RHF 로 개조하면 된다


===================================================================================================

