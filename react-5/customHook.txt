

커스텀훅 : (훅함수를 사용한 관심사 분리  -->  모듈화 하는 것)

        훅 함수를 사용하는 요직이 재사용될 때 모듈화 해놓은 것이다  -->  재사용할 수 있는 훅함수를 사용한 함수를 분리한 것

        ex)
        A 컴포넌트에서 상태 a 를 b 로 바꾸는 요직이 있다 (a --> b)
        B 컴포넌트에서 상태 a 를 b 로 바꾸는 요직이 있다 (a --> b)

        -->  A , B 는 각각 다른 컴포넌트이지만, 상태가 a 에서 b 로 바뀌는 요직은 똑같다 
        -->  이렇게 A 컴포넌트와 B 컴포넌트에서 각각 상태가 변경되는 요직이 같다면 선언과 함수를 재사용하는 것이 좋다

        함수로 만들면 관리해야할 포인트가 줄어든다

        ==>  훅함수를 사용한 관심사 분리이기에, 훅함수를 커스텀 한 것이라서 "커스텀훅" 이라고 하는 것이다
        ==>  공통되는 로직을 분리하여 관리할 포인트를 줄이는 것이다  (커스텀훅)
        ==>  "훅함수" 를 사용할 수 있는 로직을 분리함으로써, 관리할 포인트를 줄이는 것


        ) 우리는 useInput 커스텀 훅을 만들고 사용해볼 것이다

            하지만 useInput 은 RHF (React Hook Form) 를 사용하면 자주 사용하지는 않는다
            -->  그래서 useInput 을 사용한 것을 그대로 RHF 로 넘어가볼 것이다


===================================================================================================


** 경로 이동 : customHook.txt  -->  todolist(전역 상태까지 진행됨)   -->  로그인 페이지, 회원가입 페이지 (sign-in-form.jsx)

        ==>  이 투두리스트는 react-4 의 contextTodo 복사해온 것이다

        -->  먼저 sign-in-form 에서 error 메세지를 보여줄 것이다 (입력값에 따른 유효성 검사 로직을 만들어볼 것이다)

        -->  value 값 받아올 email 상태 선언해주고, input 의 onChange 로 넣어주고 실행시킬 handleChangeEmailValue 함수 만들어주자

        -->  입력창이 여러개니까, 값을 상태로 받아오려면 상태 선언과, 그에 실행할 함수도 배로 만들어줘야된다
                
                이렇게 반복되는 코드 치면 관리할 포인트가 많아진다  -->  hooks 폴더 만들어서 커스텀훅 (useInput) 으로 관심사를 분리시켜보자


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  hooks  -->  use-input.js

        -->  커스텀 훅은 앞에 반드시 "use" 로 시작해야한다


        ** 경로 이동 : use-input.js  -->  sign-in-form.jsx

            -->  커스텀훅 모두 작성했으면, 다시 로그인 페이지로 가서 useInput 사용해주자

            -->  원래 적었던 상태 지워주고, 앞에서 만들어준 useInput 커스텀 훅을 사용해보자 (상태와 함수를 동시에 선언하는 로직이다)

            -->  모두 커스텀훅으로 변경 해줬다면, 이제 입력값에 따라 error 메세지를 띄워줄 것이다


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  components  -->  FormInput.jsx

        -->  에러 처리 조건 모두 작성해줬으면 FormInput 공용 컴포넌트로 이동해주자

        -->  속성으로 error 보내줬으니, FormInput 컴포넌트에도 속성 error 추가해서 받아주자 (error 라는 key 로 텍스트가 들어가있는 value 를 보낸 것이다)

        -->  error 메세지 p 태그로 감싸주고, 스타일 넣어서 꾸며주자

        -->  p 태그 작성해주면서, 컴포넌트에 있던 "margin-bottom" css 삭제해줬는데, 이렇게 컴포넌트에 마진 직접적으로 주면 안된다


===================================================================================================


** 경로 이동 : FormInput.jsx  -->  sign-in-form.jsx (disabled 속성 넣어주기)

        -->  로그인 버튼에 disabled 속성을 넣어주자  -->  disabled 가 true 이면 버튼이 블릭이 안되고, false 이면 클릭이 되는 것이다

        -->  disabled={!isValidEmail || !isValidPassword} 이렇게 버튼의 disabled 속성을 조건으로 걸어주자 (true / false)

        -->  disabled 가 되면 버튼 비활성화로 UI 가 바뀐다  -->  하지만 상태로 만들면 안된다
                엄연히 disabled 가 되는 순간은 email 과 password 에 의존해 있다  -->  이미 email 과 password 가 상태이기에 화면이 바뀌는 것이다

                const [isDisabled, setIsDisabled] = useState()  -->  즉, 이렇게 만들어주면 불필요한 상태를 만드는 것이다


===================================================================================================


** 경로 이동 : sign-in-form.jsx  -->  sign-up-form.jsx

        -->  회원가입 페이지도 입력값에 유효성 검사 로직을 만들어주자

        -->  입력창이 총 3개인데, useInput 3개씩이나 만드는 게 옳을까?  -->  useInputs 를 만들어주자


        ** 경로 이동 : sign-up-form.jsx  -->  hooks  -->  use-inputs.js

                -->  여기서 상태 "객체" 로 만들어준 것 잘 공부해보자  -->  매우 중요하다 ***


        ** 경로 이동 : use-inputs.js  -->  sign-up-form.jsx

                -->  커스텀훅 만들어 줬으면, 다시 회원가입 페이지로 가서 useInputs 사용해주자


===================================================================================================




-----------------------------------------------------------------------------------------------------------------------------------------------