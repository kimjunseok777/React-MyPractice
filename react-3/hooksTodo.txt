

hooksTodo 수업은 todolist 폴더에서 "src" 와 "package.json" 을 복사해오는 것부터 시작하는데, 여기서 복사해왔을 때 오류가 뜬다

        -->  설치한 라이브러리 목록들은 복사해온 package.json 파일에 있지만, "node_modules" 에 설치는 아직 안돼있기 때문에 설치해줘야 한다
        -->  npm install 진행하면 패키지에 있던 라이브러리들 설치 된다 (npm i)

        -->  아직 백엔드와 정보를 주고 받는 것을 할 수 없기에 로그인 요직은 상태는 구현이 불가능하다 (나중에 해볼거다)
        -->  이번에는 투두리스트를 살아 움직이게 만들어 볼 것이다


===================================================================================================


** 경로 이동 : hooksTodo.txt  -->  main.jsx

        -->  먼저 Tab 을 클릭했을 때 "SIGN-IN" 과 "SIGN-UP" 을 이동할 수 있게 상태를 만들어보자

        -->  Tab 을 클릭했을 때 바뀌는 값 (formState) 을 state 로 사용해주면 되는 것이다

        -->  상태를 사용할 때는  -->  내가 화면을 언제 바꾸고 싶은지와, 그 타이밍에 바뀌어야 하는 변수가 무엇인지를 잘 생각하자 (그 변수를 state 로 만들면 된다)

        -->  사용자의 입장에서 생각하면, 상태가 언제 필요한지 알 수 있다 (사용자의 행동에 따라서 언제 화면이 바뀔까를 생각하자)


===================================================================================================


** 경로 이동 : main.jsx  -->  sign-up-form.jsx

        -->  회원가입 버튼 눌렀을 때 로그인 페이지로 이동하게 구현을 해보자


        ** 경로 이동 : sign-up-form.jsx  -->  main.jsx

        -->  setFormState 가 "sign-up-form" 에 없으니, "main.jsx" 에서 props 로 전달해주자  -->  <SignUpForm setFormState={setFormState} />


===================================================================================================


** 경로 이동 : main.jsx  -->  CRUD.txt

        -->  CRUD 에 대해 공부해보자


===================================================================================================


** 경로 이동 : CRUD.txt  -->  todo.jsx

        -->  투두 페이지에서 "추가" 버튼을 눌렀을 때 <AddTodoModal/> 컴포넌트가 보여지게 상태를 바꿔볼 것이다

        -->  isOpenAddTodoModal 변수를 상태로 바꿔주고, 이 상태의 값을 추가 버튼의 클릭 이벤트로 바꿀 수 있게 요직을 만들어보자 (모달창 열고 닫는 요직 만들기)


        ** 경로 이동 : todo.jsx  -->  AddTodoModal.jsx

        -->  모달창에서 ADD 버튼을 누르면 모달창이 닫히면서 " ? " 가 붙은 이상한 주소로 이동해버린다  -->  form 이 주소를 이동시킨 것이다
                닫힌 것이 아니라, state 가 초기화 되면서 닫힌 척 하는 것이다  -->  모달창에서 "ADD" 버튼과 "x" 버튼을 눌렀을 때 상태가 바뀌게 요직을 만들어보자

        -->  ADD 버튼을 눌렀을 때는 form 이벤트가 발생 되면서 닫혀야되기 때문에, form 태그인 컴포넌트에 onSubmit 이벤트를 넣어주자

        -->  마찬가지로 상위 컴포넌트에서 하위 컴포넌트로 "setIsOpenAddTodoModal" 상태변수 속성으로 전달해주자

        -->  event.preventDefault()  -->  form 이벤트에서는 반드시 작성해주는 것이 좋다  -->  안그러면 주소창에 " ? " 가 생기면서 주소를 이동시켜버린다
                (form 이벤트에서는 반드시 작성해주자)


        ** 투두리스트에서 Create(생성) 부분에서 최종적으로 어떤 코드가 필요한지 생각해보자

                -->  setTodos((prev) => [...prev, newTodo])  또는  setTodos([...todos, newTodo])  가 최종적으로 필요한 코드이다
                        (여기서 prev 는 상태 변형을 주기 이전의 값을 의미한다)

                -->  다른 것들은 todo.jsx 에서 속성으로 전달 받으면 되지만, "newTodo" 는 title 과 content 의 입력값을 받아서 새로운 객체로 만들어 줘야 한다


                ** 경로 이동 : AddTodoModal.jsx  -->  todo.jsx

                -->  todos 배열 상태로 만들어주고, 상태변수인 todos 와 setTodos 를 props 로 전달해주자


                ** 경로 이동 : todo.jsx  -->  AddTodoModal.jsx

                -->  속성으로 전달해준 setTodos 함수를 사용해서 todos 배열의 상태를 변경시키는 코드를 추가 이벤트로 들어갈 함수에 작성해주자


                ==>  이렇게 모두 완료했으면 Read(조회) , Create(생성) 모두 완료한 것이다

                ==>  이제 Delete(삭제) 와 Update(갱신) 요직 만들어보자


===================================================================================================


** 경로 이동 : AddTodoModal.jsx  -->  oneTodo.jsx , todoList.jsx

        -->  Delete(삭제) 요직 만들어보자

        -->  todos(상태변수) , setTodos(상태함수) 를 todoList.jsx 의 컴포넌트로 전달해주고, deleteTodo 함수를 만들어주자

        -->  여기서 deleteTodo 함수의 역할은 매개변수 (todoId) 로 클릭한 투두리스트의 id (고유 식별 값) 를 전달 받고, 전달 받은 id 와 (내가 클릭한 투두리스트의 id)
                일치하지 않은 id 값을 가진 투두리스트로 새로운 배열을 만들어서 setTodos 함수로 배열을 바꿔치기 하는 것이다 (상태 바꾸기)  -->  filter ***

        -->  deleteTodo 함수 만들었다면 oneTodo.jsx 로 속성으로 전달해주고, 삭제 버튼의 클릭 이벤트로 이 함수를 실행시켜주자 (매개변수로 클릭한 투두의 id 전달)

                ** 클릭 이벤트로 실행시키면, 내가 삭제 버튼을 클릭한 todo 의 id 값을 매개변수로 받을 수 있는 것이다 (고유 식별 값)


===================================================================================================


** 경로 이동 : oneTodo.jsx , todoList.jsx

        -->  수정 (갱신, Update) 요직 만들어보자

        -->  isEditMode 상태를 만들어주자 (true / false)  -->  수정모드 끄고 키는 요직 만들어주기 위함

        -->  onPressChangeEditMode , onPressEdit 함수를 만들어주자  -->  "수정버튼" 눌렀을 때와 "완료버튼" 눌렀을 때 각각 실행되는 함수들이 다르기 때문

        -->  수정 버튼의 클릭이벤트로 함수 실행과, 상테에 따라 버튼의 텍스트가 변경되게 요직을 만들어보자

        
        ==>  이렇게 수정(Update) 요직까지 만들었다면 hooksTodo 수업 종료


===================================================================================================

