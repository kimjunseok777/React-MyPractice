
앞에 day02 에서 react-router-dom 을 사용해서 주소를 감지 (path) 하여 주소에 맞는 컴포넌트를 보여줬음

----------------------------------------------------------------------------------------------------

메인 페이지에서 상세보기 페이지로 이동했다면, 상세보기 페이지에서는 코드를 작성한다면 어떠한 일을 해야할지 고민해보자.

ex)
옷 쇼핑몰 웹사이트에 접속  -->  물품 상세보기를 클릭
(junseok.com)  -->  (junseok.com/product)

메인 페이지  -->  상세보기 페이지 이동

백엔드에 이달의 인기 상품 목록 요청 (메인페이지에서 할거다)  -->  그럼 상세보기 페이지에서는 백엔드에 뭘 요청해야할까?

-->  상품의 "고유한 값" 을 전달하여 해당 상품의 상세한 정보 요청 (상품 상세페이지에서 요청)  -->  상품의 고유한 값 ex) product?goods=23241223
        
        이렇게 "출력" 은 정해졌다. 그럼 이제 "입력" 은 어떻게 가져올지 고민해보자. (페이지 이동이 이뤄졌는데, 내가 클릭한 "상품의 고유한 값" 어떻게 가져올 수 있을까?)

-->  react-router-dom 에는 주소에 전달된 데이터를 가지고 올 수 있는 방법이 존재하다  -->  URL Parameter (주소 매개변수)
        URL Parameter 를 사용하면 페이지와 페이지를 이동해도 데이터를 가져올 수 있다  -->  ex) 변수

-->  페이지와 페이지를 이동할 때는 가지고 있는 변수 같은 것들이 다 삭제된다 (메인 -> 상세보기 페이지 이동이 있었기 때문) --> 그럼 어떡해야할까?
        웹 브라우저에 있는 "저장소" 들을 이용해야한다 --> 그중 하나인 "URL" 을 사용할 거다 --> ex) junseok.com/product?goods=23241223
        
-->  상품의 id (key 값) 를 심어놓고, 상품을 클릭했을 때 주소(URL)가 바뀌게 하는 것이다
        junseok.com/product?goods=23241223

----------------------------------------------------------------------------------------------------

URL Parameter

    1. useSearchParams (query-string : 하나의 문자열로 표현하는 것) : 가장 많이 사용하는 방법이다

        ex) junseok.com/product?goods=23241223  -->  이렇게 하나의 문자열로 표현한다 해서 "query-string" 이다
        사용법 :
        const [searchParams, setSearchParams] = useSearchParams()
        searchParams.get("goods") // 23241223  -->  키값 (goods) 을 맞춰주면 이러한 고유한 값이 온다

    -----------------------------

    2. useParams (url-parameter 를 사용하는 방법  -->  매우 간단하다)

        ex) junseok.com/product/3123242  -->  아예 슬래시 "/" 로 구분한 것이다
        사용법 :
        path: /todo/:todoId  -->  이러면 / 뒤에 적은 값이 todo 의 id 값으로 온다
        element: <TodoPage />

        이후에 pages - todo.jsx 에서 const { todoId } = useParams() 작성해주면 "3123242" 값이 나오게 된다
        --> 뒤에 _todo.jsx 로 파일명을 바꿔줬다

----------------------------------------------------------------------------------------------------

- 데이터를 주소를 통해 전달할 수 있다

- react-router-dom 은 단순하게 URL 을 맵핑해주는 역할만 하는 것이 아니라 주소를 다루는 다양한 함수를 지원한다


=============================================================================================


모두 익혔다면 router.js 로 이동해서 "useParams" 를 사용해보자  -->  Todo 의 path 를 변경시켜주자


=============================================================================================


경로 이동 main.jsx -> day03.txt

번들(bundle) :

    -->  너저분하게 분리된 리소스들을 특정 기준으로 분리하여 사용자에게 화면이 보여지는 시간을 감소하는 작업

    -->  트리쉐이킹 : 사용하지 않는 불필요하는 코드는 제거하고 필요한 코드들만 사용 (나무를 흔들어서 필요 없는 낙엽들 떨어트림)

    -->  bundle.js : 번들링 된 결과물 (번들링된 코드들, 필요한 코드들을 모두 다 받아온 것)

이제 다시 브라우저로 이동한 후에 Network에 bundle.js 를 확인해보면, 페이지를 이동하면 새로고침되면서 번들이 다시 받아와지는 것을 확인할 수 있다
--> bundle.js 가 우리가 필요한 코드를 모두다 받아온 것이라 했으니, 이렇게 다시 받아와지면 안된다.

--> 페이지를 이동하면 bundle.js 가 다시 받아와지면 안된다 (또 받아오는 작업이 되면 안되는 것, 다른 코드들도 있기 때문)

--> main.jsx 로 이동해서 a 태그를 link 태그로 바꿔주자
--> <a href={`/todo...`}></a>  이 코드를  <Link to={`/todo...`}></Link> 태그로 바꿔주자

--> Link 태그 : react-router-dom 에서 지원하고 있는 태그  -->  자동완성 시키면 상단에 "import { Link }" 생기는 것 확인할 수 있다

----------------------------------------------------------------------------------------------------

--> bundle.js : 페이지를 그리기 위한 필요한 리소스들을 잘 정리한 요약본이다.(코드를 뭉쳐놓은 것)
       페이지를 이동할 때마다 모든 페이지를 요청하는 것은 비효율 적이기에, bundle.js 를 다시 받아와지는 것을 막은 것이다 (이미 코드 다 받았으니, bundle.js 재요청 필요 없음)

--> react-router-dom 에는 위에 있는 주소만 바꿔주는 친구가 있다  -->  다시 main.jsx 로 이동해서, 컴포넌트 상단에 "const navigation = useNavigate()" 작성해주자

useNavigate() : 페이지의 새로고침 없이 (history 객체와 state 를 이용하여) 페이지의 갱신 없이 주소를 이동하는 함수
                            자바스크립트 자체 기능이 아니다  -->  react-router-dom 을 개발한 개발진들이 정의한 함수이다
                            --> (페이지 갱신이 없으니까, bundle.js 를 다시 요청하지 않는다)

                            --> 리액트에서 화면을 다시 그리려면 state 라는 값이 수정되야한다
                            -->  useParams, useSearchParams 등을 사용하면 이 값이 자체가 state 이기 때문에 편리하다


=============================================================================================


모두 마쳤다면 이제 "스타일드 컴포넌트" 에 대해 알아보자 (컴포넌트를 분리해보고 꾸며보자)
--> 이제 다른 main 과 todo 를 사용할거라서, 파일 이름 앞에 "@" or "_" 를 붙여서 구분을 해주자  -->  main, todo 앞에 "_" 로 이름 변경

--> 그리고 새로운 main.jsx , todo.jsx 파일 만들어주자  -->  새로 만든 main.jsx 로 이동해주자


=============================================================================================


컴포넌트를 나누는 기준 :

    1. 재사용
    2. 가독성
    3. 단일 기능
    4. 랜더링 최적화
        --> 리랜더링 (함수 재실행)
        --> 내가 리랜더하고 싶은 함수(컴포넌트)가 아니라면 랜더링 해서는 안된다

----------------------------------------------------------------------------------------------------

react style sheet (리액트의 스타일시트)

    1. css - in - js  (현재는 실무에서 가장 많이 사용되는 방법)
            js 파일에 css 문법 작성이 가능한 스타일링 방법
            ex) styled-component, emotion, styleX

    2. pure css / scss + ( post css )
            일반적인 css는 class 구분이 어려웠음  -->  하지만 post css를 사용하면
            app.module.css 를 통해서 해당 컴포넌트에서만 사용할 수 있는 css를 import 할 수 있다

    3. tailwindcss / panda-css
            가장 최근 스택에서는 자주 사용되는 스타일 시트
            ex) <div class"w300 h200">...</div>

----------------------------------------------------------------------------------------------------

"styled-component" 를 사용해서 스타일 컴포넌트를 만들어보자  :  npm i styled-components

styled-component : 스타일된 컴포넌트를 생성해서 요소 대신 생성된 컴포넌트를 활용하는 방법

    사용법 ex)

        const Wrapper = styled.div`
            css 문법 작성...
        `

        --> 이러면 Wrapper 라고 하는 스타일드 컴포넌트가 생성이 된 것이다
        --> 이렇게 생성해줬으면, div 대신에 그냥 Wrapper 쓰면 된다
        ex)
        <Wrapper>
            <div>
                ...
        </Wrapper>

        --> 정리하면 꾸며져 있는 div (요소) 를 생성해서 컴포넌트화 시킨 것이다 --> 그래서 "스타일드 컴포넌트" 이다
        --> 스타일된 div 를 생성한 것이다

        ==> 설치 방법 : npm i styled-components

        --> 이 친구도 공식문서 있다
        --> 설치했을 때 터미널에서 나오는 "npm audit fix --force" 이 친구는 무시해주자

        ==> vscode-styled-components 확장 프로그램 설치  -->  스타일드 컴포넌트 css 자동완성 기능을 해준다

=============================================================================================


모두 마쳤다면 다시 새로 만든 main.jsx 로 이동해주자


=============================================================================================


이렇게 간단하게 ":)" 텍스트가 화면 가운데로 이동하게 하는 스타일드 컴포넌트를 적용시켜주면 day03 수업 끝.

마지막 경로 이동 : day03.txt  -->  main.jsx