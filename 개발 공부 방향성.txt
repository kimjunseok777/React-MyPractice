
프론트엔드는 취업할 때 사전과제가 많이 나온다 (입사과제 같은 것)

ex) 우리가 화면 주고, 요구사항 줄테니까 이거 똑같이 만들어봐, 또는 우리가 이런 조건 줄테니까 우리 조건 맞춰봐 등등

--------------------------------------------------------------------------------------------------------------

수업 끝나고 뭐해야할까?

    1. 부족한 것, 두고온 것, 하지않은 것 있는지 판단하고 복습 (1-3, 1-4 는 평소에 꾸준히 해야한다)

        1-1 : javascript check-list

        1-2: react check-list

        1-3 : deep dive javascript
                 쏙쏙 들어오는 함수형 코딩
                 우아한 타입스크립트
                 deep dive react  -->  이런 독서 같은 것들은 study 모임 하면 되게 좋다
                 -->  책 읽은 것들은 무조건 요약해서 github 에 기록해야한다 (면접볼때 이 책을 읽었다라고 증명할 수 있는 수단이 이것밖에 없다  -->  무조건 회고하자)

        1-4 : 코딩 테스트 알고리즘 문제풀이

        1-5 : todo-list 안보고 만들기

        1-6 : open-api 를 통해서 프로젝트 간단하게 1~2 개

        1-7 : 페이지네이션, 무한스크롤링, 스켈레톤 ui

        -->  이렇게 1번 리스트 모두 마쳤으면, 이제 프로젝트 할 준비가 된 것이다


    2. react 만 사용하는 프로젝트를 2~3 개월 진행


    3. 타입스크립트 공부하면서, 이력서, 면접준비 지원
        이력서 : react, 진행중 프로젝트 1개  -->  이게 지원할 때 최소한의 조건이다


    4. NEXT-JS 공부 (1개월) / REACT-TYPESCRIPT 프로젝트 (2~3개월)  -->  둘중에 하나 선택
        이력서 : next, typescript, react, 진행중 프로젝트 1개  -->  프로젝트 3개


    5. NEXT + REACT + TYPESCRIPT 프로젝트 (2~3개월) / NEST-JS (1개월)
        회사 지원하면서  -->  채용 프로세스 : 1달 ~ 2달, 2달 ~ 4달


--------------------------------------------------------------------------------------------------------------


회사 지원할 때 코딩테스트가 어려운게 나온다면, 보통 레벨 3에서 최대 4까지 나온다고 보면 된다
-->  보통 2~3 레벨 정도 나온다


--------------------------------------------------------------------------------------------------------------


다른 사람들 이력서 공유해주는 사이트  -->  Rallit - 허브

프로젝트 보는 사이트 : LET'S PL , 인프런 ... 등등

자바스크립트 코딩 테스트 강의 들어도 괜찮다


--------------------------------------------------------------------------------------------------------------


) 개발에 취업 생각이 있다면, 개발을 준비하는 최소한의 기준이 있다

React (필수)
Typescript (필수 or 선택)  -->  공부했다라는 흔적은 필요하다
NextJS (필수 or 선택)  -->  있으면 좋다 (다다익선)  -->  공부 안하면 NextJS 공부한 사람들한테 밀린다
프로젝트 경험 최소 2회 (React 로한 프로젝트 1개 , React-Typescript 한 프로젝트 1개 , Next-Typescript 1개  -->  이렇게 3개 있으면 베스트이다)

프로젝트는 단순히 사이드프로젝트 (오픈 api 사용하는 거) 도 있으면 좋지만, 무엇보다 협업 프로젝트  -->  즉, 협업 경험이 매우매우 중요하다

프로젝트 LV1 ) 사이드 프로젝트 2개, 협업 프로젝트 1개  -->  최소한의 조건
프로젝트 LV2 ) 사이드 프로젝트 1개, 협업 프로젝트 2개 (협업 프로젝트만 2개 올려도 된다)  -->  보편적이다 (연락이 조금 오기 시작)
프로젝트 LV3 ) 협업 프로젝트 (다다익선), 대외활동 경험 (웹 동아리나, 웹 연합회 같은 것들), 인턴 경험, 상위권 부트캠프 ... 등등

이력서 준비할 때 강조해야하는 것은  -->  "다름" 이다

) 다름을 증명할 수 있는 방법 :

        대외 활동 , 인턴 경험
        깃허브 잔디
        기술 블로그, 회고  -->  문제를 해결한 회고 등등 작성하면 매우 좋다 ex) 내가 A 라는 프로젝트에 B 라이브러리를 사용하게 된 이유 (일기장 쓰듯이 쓰는 건 기술 블로그가 아니다)
        협업 경험, 리뷰 문화, PR, 소프트 스킬  -->  ex) 우리는 이런식으로 협업했다
        다이어그램  -->  ex) 코드 분석한 것 문서화


--------------------------------------------------------------------------------------------------------------


한국의 실리콘벨리  -->  분당의 판교


--------------------------------------------------------------------------------------------------------------


) 프론트엔드 서버 배포

        netlify , vercel  -->  깃허브 계정 연동  -->  레포지토리 선택  -->  딸깔  -->  배포 끝 (프론트 서버 배포하는 건 되게 쉽다)
        goddady 에서 도메인 사서 연결하면 끝이다


--------------------------------------------------------------------------------------------------------------


) 자바스크립트
        자바스크립트 알고리즘 강의
        자바스크립트 알고리즘 문제풀이 (100제 + 프로그래머스)
        자바스크립트 함수 정의, 출력 값에서 입력 값 찾기, 자연어 설계
        자바스크립트 딥다이브 책 이해
        비동기, fetch, axios  -->  백엔드와 데이터를 교류하는 방법

) 리액트
        기본 개념 이해, 유튜브 무료 강의 (컴포넌트, 재조정, 동작 원리)
        리액트 (컴포넌트 기반 프레임워크) 는 왜 써야하는가?  -->  강력한 커뮤니티가 형성되어있음
        훅함수 (state, ref, effect), 메모라이즈 (react.memo, useMemo, useCallback)
        상태 최적화 (불필요한 상태 제거, 랜더링 최적화)  -->  컴포넌트 나누는 기준 정의하기 (4가지 이상)
        컴포넌트를 나누고 상태로 구분되는 간단한 토이 프로젝트 (게시글, 투두리스트)  -->  styleSheet (styled-component, emotion, tailwind ...)

        전역상태관리 (context-api  -->  redux, rtk  -->  recoil, zustand, jotai)  -->  Reqct-Query 까지 되면 너무 좋다
        전역상태관리는 언제 일어나야하는가? 단점은 무엇인가?
        Reqct-Query  서버 데이터 관리

        영화 오픈 API 를 활용한 프로젝트 (TMDB  -->  오픈소스이고 공식문서가 있다)
        https://developer.themoviedb.org/docs/getting-started
        페이지네이션, 무한스크롤링, URL 필터링  -->  구글링 검색해서 꼭 만들어보기 , react-router-dom (useSearchParams) 공부해보기

        github flow (commit - push - pr - review - merge)
        디바운싱, 쓰로틀링  -->  공부하기

        // 딥다이브 리액트  -->  어려우니까, 위에 것들 모두 진행 안됐다면 읽지 말자
        // + 무료강의  -->  개념정리

        ------------------ 프로젝트 준비 완료 ------------------ (위처럼 자그마한 토이프로젝트가 있어야 구인이 된다)

        react 를 사용하는 프로젝트 진행 구인  -->  프로젝트 진행 (못해도 2~3 개월 정도 걸림)

        -->  여기까지 8개월 정도 걸린다

        프로젝트 마무리즈음에는 테스크가 많이 줄어듬

        typescript 공부 진행 , nextJS 공부 같이 진행 (learn Next.js) + 무료강의 (1개월 ~ 2개월이면 충분하다)
        
        nextJS를 사용하는 프로젝트 진행 구인  -->  프로젝트 진행 (3개월)

        이력서 제작 (next 프로젝트를 진행중 표기)  -->  구인 활동 (1개월 반 ~ 3개월)


        프로젝트 할 때 대외활동  -->  웹동아리




        