

전역 상태 관리 (global state management)

지역변수  <-->  전역변수
코드블럭 (특정 스코프) - 지역 변수
코드전체 (전역 스코프) - 전역 변수

상태  <-->  전역상태
특정 컴포넌트 내에서만 사용하는 상태 --> 상태 : 단, props로 전달하면 하위 컴포넌트로 내려주는 것이 가능
컴포넌트 구분 없이 모든 컴포넌트에서 접근이 가능한 상태 --> 전역 상태


전역상태 왜 사용해야하나요?

    - 프롭스 드릴링을 예방하기 위해서
        C 라는 컴포넌트가 있다  -->  E 라는 컴포넌트로 상태를 전달해야함 (A, B, D 를 거쳐야함)
        추적이 어렵다

    - 전역 상태 관리를 쓴다면?
        C (전역상태)  -->  E (전역상태 - 바로 갖다 쓸 수 있음)

    - 불효하지 않기 위해서 사용
        C(todos)  -->  C에서 todos를 사용한 적 (상태를 변경한적) 이 있을까?  -->  부모가 자식 컴포넌트에 값을 전달하기 위해서 몰라도 되는 상태를 알고 있을 때

        
리액트에서 전역상태 관리를 하는 방법

    1. Context API
        리액트에 내장된 전역 상태 관리를 위한 빌트인 객체  -->  훅함수로 관리 가능
        단점
            - 보일러 코드 (사용하기 위해서 작성해야하는 코드가 많음)
            - 리랜더링 최적화가 어렵습니다 (전역상태다 보니까 얘가 바뀌면 화면 전체가 리랜더링 돼버림)
            - 백엔드에서 받아온 데이터를 전역상태 관리하기 힘들다

    2. 라이브러리
        redux  -->  이거로 배워볼 것이다
                    --> 현재 사라져야 하는 전역상태 관리 라이브러리 1위
                    --> 현재 시장에서 이전에 만들었던 프로젝트의 유지보수와, 스텍을 맞추기 위해 사용하는 경우가 많음

        mobx
        recoil  -->  이거로 배워볼 것이다
                    --> 최근에는 사용하는 경우가 적지만, 사용했던 프로젝트들이 다수 있고, 최근 유행하는 jotai가 recoil 경량화 버전

        jotai
        zustand
                    -->  jotai, zustand 현재 가장 자주 사용